function [methodinfo,structs,enuminfo,ThunkLibName]=alpV42x32proto
%ALPV42X32PROTO Create structures to define interfaces found in 'alp'.

%This function was generated by loadlibrary.m parser version 1.1.6.38 on Tue Feb 25 14:47:29 2014
%perl options:'alp.i -outfile=alpV42x32proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
%  long AlpDevAlloc ( long DeviceNum , long InitFlag , ALP_ID * DeviceIdPtr ); 
fcns.name{fcnNum}='AlpDevAlloc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'ulongPtr'};fcnNum=fcnNum+1;
%  long AlpDevControl ( ALP_ID DeviceId , long ControlType , long ControlValue ); 
fcns.name{fcnNum}='AlpDevControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'long'};fcnNum=fcnNum+1;
%  long AlpDevInquire ( ALP_ID DeviceId , long InquireType , long * UserVarPtr ); 
fcns.name{fcnNum}='AlpDevInquire'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'longPtr'};fcnNum=fcnNum+1;
%  long AlpDevHalt ( ALP_ID DeviceId ); 
fcns.name{fcnNum}='AlpDevHalt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  long AlpDevFree ( ALP_ID DeviceId ); 
fcns.name{fcnNum}='AlpDevFree'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  long AlpSeqAlloc ( ALP_ID DeviceId , long BitPlanes , long PicNum , ALP_ID * SequenceIdPtr ); 
fcns.name{fcnNum}='AlpSeqAlloc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'long', 'ulongPtr'};fcnNum=fcnNum+1;
%  long AlpSeqControl ( ALP_ID DeviceId , ALP_ID SequenceId , long ControlType , long ControlValue ); 
fcns.name{fcnNum}='AlpSeqControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'long'};fcnNum=fcnNum+1;
%  long AlpSeqTiming ( ALP_ID DeviceId , ALP_ID SequenceId , long IlluminateTime , long PictureTime , long TriggerDelay , long TriggerPulseWidth , long VdDelay ); 
fcns.name{fcnNum}='AlpSeqTiming'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  long AlpSeqInquire ( ALP_ID DeviceId , ALP_ID SequenceId , long InquireType , long * UserVarPtr ); 
fcns.name{fcnNum}='AlpSeqInquire'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'longPtr'};fcnNum=fcnNum+1;
%  long AlpSeqPut ( ALP_ID DeviceId , ALP_ID SequenceId , long PicOffset , long PicLoad , void * UserArrayPtr ); 
fcns.name{fcnNum}='AlpSeqPut'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'long', 'voidPtr'};fcnNum=fcnNum+1;
%  long AlpSeqFree ( ALP_ID DeviceId , ALP_ID SequenceId ); 
fcns.name{fcnNum}='AlpSeqFree'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long AlpProjControl ( ALP_ID DeviceId , long ControlType , long ControlValue ); 
fcns.name{fcnNum}='AlpProjControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'long'};fcnNum=fcnNum+1;
%  long AlpProjInquire ( ALP_ID DeviceId , long InquireType , long * UserVarPtr ); 
fcns.name{fcnNum}='AlpProjInquire'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'longPtr'};fcnNum=fcnNum+1;
%  long AlpProjStart ( ALP_ID DeviceId , ALP_ID SequenceId ); 
fcns.name{fcnNum}='AlpProjStart'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long AlpProjStartCont ( ALP_ID DeviceId , ALP_ID SequenceId ); 
fcns.name{fcnNum}='AlpProjStartCont'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long AlpProjHalt ( ALP_ID DeviceId ); 
fcns.name{fcnNum}='AlpProjHalt'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  long AlpProjWait ( ALP_ID DeviceId ); 
fcns.name{fcnNum}='AlpProjWait'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  long AlpLedAlloc ( ALP_ID DeviceId , long LedType , void * UserStructPtr , ALP_ID * LedId ); 
fcns.name{fcnNum}='AlpLedAlloc'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
%  long AlpLedFree ( ALP_ID DeviceId , ALP_ID LedId ); 
fcns.name{fcnNum}='AlpLedFree'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  long AlpLedControl ( ALP_ID DeviceId , ALP_ID LedId , long ControlType , long Value ); 
fcns.name{fcnNum}='AlpLedControl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'long'};fcnNum=fcnNum+1;
%  long AlpLedInquire ( ALP_ID DeviceId , ALP_ID LedId , long InquireType , long * UserVarPtr ); 
fcns.name{fcnNum}='AlpLedInquire'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'longPtr'};fcnNum=fcnNum+1;
%  long AlpLedControlEx ( ALP_ID DeviceId , ALP_ID LedId , long ControlType , void * UserStructPtr ); 
fcns.name{fcnNum}='AlpLedControlEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'voidPtr'};fcnNum=fcnNum+1;
%  long AlpLedInquireEx ( ALP_ID DeviceId , ALP_ID LedId , long InquireType , void * UserStructPtr ); 
fcns.name{fcnNum}='AlpLedInquireEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'long', 'voidPtr'};fcnNum=fcnNum+1;
structs.tAlpHldPt120AllocParams.members=struct('I2cDacAddr', 'long', 'I2cAdcAddr', 'long');
methodinfo=fcns;